'''
Created on 23.06.2010

@author: Jens Frenkel

compares two modelica models generated by PyMbs
'''

import sympy
from sympy.core.sympify import SympifyError
from sympy.core.basic import Basic
from pymbs.common.functions import element

# sympify with locals
local_dict = {}
exec('from pymbs.common.functions import *', local_dict)

NOMODEL = 0
VARIABLES = 1
EQUATIONS = 2

def sympify(exp,assignments=None):

    repexp=dict()
    exp = exp.replace(' ','').replace('\n','')
    pos = exp.find('[')
    if (pos >=0):
        bc = exp.find(']')
        valstr = exp[pos+1:bc]
        val = int(valstr)
    while (pos > 0):
        anf = exp.rfind(',',0,pos)
        anf1 = exp.rfind('(',0,pos)
        anf2 = exp.rfind('-',0,pos)
        anf3 = exp.rfind('+',0,pos)
        anf4 = exp.rfind('*',0,pos)
        anf5 = exp.rfind('/',0,pos)
        anf6 = exp.rfind(' ',0,pos)
        anf7 = exp.rfind('[',0,pos)
        anf8 = exp.rfind(']',0,pos)
        anf9 = exp.rfind('{',0,pos)
        anf0 = exp.rfind('}',0,pos)
        anf = max([anf,anf1,anf2,anf3,anf4,anf5,anf6,anf7,anf8,anf9,anf0])
        symname = exp[anf+1:pos]
        tmpsymname = symname + '_' + str(val)
        try:
            tmpsym = sympy.sympify(symname)
        except SympifyError:
            print(symname)
            return None
        try:
            tmpsym1 = sympy.sympify(tmpsymname)
        except SympifyError:
            print(tmpsymname)
            return None
        a = element(tmpsym,val,1)
        #assignments[tmpsym1] = a
        local_dict[tmpsymname] = a
        exp = exp.replace('%s[%s]'%(symname,val),tmpsymname)
        pos = exp.find('[')
        if (pos >=0):
            bc = exp.find(']')
            valstr = exp[pos+1:bc]
            val = int(valstr)

    exp = exp.replace('{','[').replace('}',']')
    bro = exp.find('[')

    if (bro >= 0):
        expparts = list()
        if (bro > 0):
            expparts.append(exp[0:bro])
        buffer = ''
        level = 0
        subexp = exp[bro:len(exp)]
        for s in subexp:
            if (s == '['):
                if (level == 0):
                    if (len(buffer)>0):
                        expparts.append(buffer)
                        buffer = ''
                level = level + 1
            if (s == ']'):
                level = level - 1
                if (level == 0):
                    expparts.append(buffer+s)
                    buffer = ''
                    continue
            if (s != '\t') and (s != '\n'):
                buffer = buffer + s

        if (len(buffer)>0):
            expparts.append(buffer)


        for e in expparts:
            try:
                es = sympy.sympify(e, locals=local_dict)
            except SympifyError:
                continue
            except TypeError:
                continue

            if (isinstance(es,list)):
                es = sympy.Matrix(es)

                if (len(expparts)==1):
                    if (assignments is None):
                        return es
                    else:
                        return es,assignments

                if (assignments is not None) and (len(expparts)>1):
                    name = '__tmp_%s'%str(len(assignments))
                    tmpsym = sympy.sympify(name)
                    assignments[tmpsym] = es
                    es = tmpsym
                    exp = exp.replace(e,name)

    try:
        exp = sympy.sympify(exp, locals=local_dict)
    except SympifyError:
        print('SympifyError cannot parse %s'%exp)
        exp = None
    except TypeError:
        print('TypeError cannot parse %s'%exp)
        exp = None
    if (assignments is None):
        return exp
    else:
        return exp,assignments

def loadFile(file):

    symbols = dict()
    assignments = dict()

    neednextline=False
    buffer = ''
    symb = ''
    f = open(file,'r')

    section = NOMODEL
    modelname = None

    for line in f:

        if (neednextline==True):
            ende = line.find(';')
            commend = line.find('"')

            if (ende > 0):
                if (commend > 0):
                    ende = min([ende,commend])

                exp = buffer+line[0:ende]
                exp,assignments = sympify(exp,assignments)
                assignments[sympify(symb)] = exp
                neednextline = False
                symb = ''
                buffer = ''

            else:
                buffer = buffer + line[0:len(line)]
                neednextline = True

            continue


        if (line.find('model')>=0):
            section = VARIABLES
            anfang = line.find('model')
            ende = line.find('"')
            if (ende > 0):
                modelname = line[anfang+5:ende]
            else:
                modelname = line[anfang+5:len(line)]
            modelname = modelname.replace(' ','').replace('\n','')
            continue
        if (line.find('protected')>=0):
            section = VARIABLES
            continue
        if (line.find('equation')>=0):
            section = EQUATIONS
            continue
        if (line.find('end')>=0):
            if (line.find(modelname) >0):
                section = NOMODEL
                continue

        if (section == VARIABLES):
            param = line.find('parameter Real')
            constant = line.find('constant Real')
            next = line.find('Real')
            if (next>=0):
                nextn = line.find('[',next+4)
                if (nextn>0):
                    next = nextn
                    nextn = line.find(']',next)
                    if (nextn>0):
                        next = nextn

                space = line.find(' ',next)
                ende = line.find(' ',space+1)
                br = line.find('(',space+1)
                sem = line.find(';',space+1)
                eq = line.find('=',space+1)
                if (ende < 0):
                    if (br > 0):
                        ende = br
                    elif (sem > 0):
                        ende = sem
                    elif (eq > 0):
                        ende = eq
                    else:
                        assert 'Cannot parse line %s'%line
                if (br > 0):
                    ende = min([ende,br])
                if (sem > 0):
                    ende = min([ende,sem])
                if (eq > 0):
                    ende = min([ende,eq])
                assert (ende>0 or space>0 or ende>space), 'Cannot parse line %s'%line
                name = line[space:ende]
                symbols[name] = 1

                if (param >= 0) or (constant >= 0):
                    # try to sympify eqn
                    assert (eq > 0), 'param or constant without equal sign: %s'%line
                    ende = line.find(';',eq+1)
                    commend = line.find('"',eq+1)

                    if (ende > 0):
                        if (commend > 0):
                            ende = min([ende,commend])

                        exp = line[eq+1:ende]
                        exp,assignments = sympify(exp,assignments)
                        assignments[sympify(name)] = exp

                    else:
                        symb = name
                        buffer = line[eq+1:len(line)]
                        neednextline = True



        elif (section == EQUATIONS):
        #    print 'Read Equation'
            eq = line.find('=')
            assert (eq>0), 'cannot parse line: %s'%line

            name = line[0:eq-1]
            ende = line.find(';')
            if (ende > 0):
                exp = line[eq+1:len(line)]
                exp = exp.replace(';','')
                exp,assignments = sympify(exp,assignments)
                assignments[sympify(name)] = exp
            else:
                symb = name
                buffer = line[eq+1:len(line)]
                neednextline = True

    return (symbols,assignments)

def compareSymbols(sa,sb):

    for s in sa:
        if (s in sb):
            sb[s] = 2
            sa[s] = 2
        else:
            print('%s not in b'%s)

    for s,v in sb.items():
        if (v == 2):
            continue
        print('%s not in a'%s)


def getSymbols(exp):

    def addMatrix(matrix, symbols):

        # Assertions
        assert( isinstance(matrix, sympy.Matrix) )

        # besitzt Matrix Symbole
        for a in matrix:
            # in Matrix expression
            atoms = a.atoms()
            for a in atoms:
                if (isinstance(a,sympy.Symbol)):
                    symbols.add(a)

        return symbols

    ret = set()
    # Assertions
    assert( isinstance(exp, int) or isinstance(exp, float) or isinstance(exp, sympy.Basic ) or isinstance(exp, sympy.Matrix) ), 'unknown exp type %s'%exp

    if ((isinstance(exp, int)) or (isinstance(exp, float)) or (isinstance(exp, sympy.Number))):
        return ret
    elif (isinstance(exp, Basic )):
        atoms = exp.atoms()
        for a in atoms:
            if (isinstance(a,sympy.Symbol)):
                ret.add(a)
            elif (isinstance(a,sympy.Matrix)):
                ret = addMatrix(a,ret)
        return ret
    elif (isinstance(exp, sympy.Matrix)):
        return addMatrix(exp,ret)
    else:
        raise AttributeError("Wrong type of Expression")
    return ret


def getIncidenceMatrix(a):


    i = dict()
    for k,v in a.items():
        symbols = getSymbols(v)
        i[k] = symbols

    return i

def compareIElements(e,sa,sb,ia,ib):

    #if (e == sympy.sympify('int_T_rot_0_')):
    #    print 'ja'
    ret = set()
    saplus = set()
    for s in sa:
        if (s not in sb):
            syms = ia.get(s)
            if (syms is not None):
                for ssym in syms:
                    if (ssym not in sb):
                        if (len(syms)<2):
                            syms1 = ia.get(ssym)
                            if (syms1 is not None):
                                for ssym1 in syms1:
                                    if (ssym1 not in sb):
                                        print('%s: %s not in b'%(e,s))
                        else:
                            print('%s: %s not in b'%(e,s))
                    else:
                        saplus.add(ssym)
                        ret.add(ssym)
        else:
            ret.add(s)
    for s in sb:
        if (s not in sa):
            if (s not in saplus):
                syms = ib.get(s)
                if (syms is not None):
                    for ssym in syms:
                        if (ssym not in sa):
                                print('%s: %s not in a'%(e,s))
                        else:
                            ret.add(ssym)
        else:
            ret.add(s)

    for s in ret:
        sa = ia.get(s)
        sb = ib.get(s)
        if (sa is None):
            print('Symbol not in a %s'%sa)
            continue
        if (sb is None):
            print('Symbol not in b %s'%sb)
            continue
        compareIElements(s,sa,sb,ia,ib)

def compareIncidenceMatrix(aa,ba):


    ia = getIncidenceMatrix(aa)
    ib = getIncidenceMatrix(ba)

    # compare int_C_

    s = sympify('int_C_')
    int_C_a = ia[s]
    int_C_b = ib[s]

    compareIElements(s,int_C_a,int_C_b,ia,ib)

def compareEqnSys(a,b):

    # open files
    af = loadFile(a)
    bf = loadFile(b)

    print('compare Symbols')
    compareSymbols(af[0],bf[0])
    print('compare IncidenceMatrix')
    compareIncidenceMatrix(af[1],bf[1])

    #for k,v in af[1].iteritems():
    #    print '%s = %s'%(k,v)
    #for k,v in bf[1].iteritems():
    #    print '%s = %s'%(k,v)


filea = 'D:/Programming/Libraries/PyMbs/PyMbs/Examples/Output/FreeBody.mo'
fileb = 'D:/Programming/Libraries/PyMbsOld/PyMbs/Examples/Output/FreeBody_der_state.mo'

compareEqnSys(filea, fileb)

